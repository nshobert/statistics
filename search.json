[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Notes from Statistical Inference",
    "section": "",
    "text": "The pages of this site use interactive graphics to explore concepts from an Inferential Statistics course.\n\n\n\n Back to top"
  },
  {
    "objectID": "binomial_dist.html",
    "href": "binomial_dist.html",
    "title": "Binomial Distribution",
    "section": "",
    "text": "If \\(X\\) is a binomial random variable with parameters\n\nn\np\n\nthen we write: \\[\nX ~ Bin(n, p)\n\\] where\n\nn is the number of trials,\n\ne.g. n=10 coin tosses\n\nthere are only two possible outcomes of a trial,\n\neach coin toss can either be Heads or Tails\n\ntrials are independent of each other,\nand the probability of success, i, is the same for each trial.\n\nevery coin toss, the probability of getting Heads is always 0.5\n\n\nA binomial distribution describes the probabiliy of obtaining k successes in n binomial experiments. The equation for it is \\[\nP(X=k) = nCk * p^k * (1 - p)^{n-k}\n\\]\nNote that \\(nCk\\) is the number of ways to obtain k success in n trials.\nThe probability of a binomial\nWe can use a binomial calculator to answer questions like\n\nwhat’s the probability that a coin will land on Heads 43 times in 100 trials?\n\np = 0.5, n = 100, k = 43\nP(X=43) = 0.0301\n\n\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 420\n\nfrom shiny.express import input, render, ui\nfrom math import factorial\n\nui.page_opts(title=\"Binomial Experiments Probability\")\n\nui.input_slider(\n    \"p\", \n    \"Probability of Success per Trial\", \n    min=0, \n    max=1, \n    value=0.5,\n    step=0.1)\n\nui.input_numeric(\n    \"n\", \n    \"Number of Trials\", \n    value=100,\n    step=1\n)\n\nui.input_numeric(\n    \"k\", \n    \"Number of Success in n Trials\",\n    value=43,\n    step=1,\n)\n\nui.input_action_button(\"run_calc\", \"Calculate\")\n\n# Define the Binomial probability calculation\ndef p_of_x(p, n, k):\n    return factorial(n) / (factorial(n - k) * factorial(k)) * p ** k * (1 - p) ** (n-k)\n\n@render.code\ndef txt():\n    # When user clicks \"Calculate\", calculate binomial probability\n    calculated_p = p_of_x(input.p(), input.n(), input.k()) \n    return rf\"The probabilty P(X = {input.k()}) is {calculated_p:.3}\"\n\n\n\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 650\n\nfrom shiny.express import input, render, ui\nfrom shiny import reactive\nimport pandas as pd\nfrom math import factorial\nimport plotly.express as px\nfrom shinywidgets import render_plotly\n\n# Title\nui.h1(\"Visualizing the Binomial Distribution\")\n\n# Description\nui.markdown(\n    \"\"\"\n\n  This histogram assumes *n* = 30 trials. Use the slider to change *p*, the probability of success of a single trial, to see its effect on the distribution.\n  \"\"\"\n)\n\n# Fix the experiment at 30 trials\nn = 30\n\n# Get user inputs for p and k.\nui.input_slider(\n    \"p\",\n    \"Select p, the probability of success for a trial\",\n    min=0,\n    max=1,\n    value=0.5,\n    step=0.05,\n    width='600px',\n    ticks=True\n)\n\n\n# Define the binomial probability function\ndef p_of_x(p, n, k):\n    return factorial(n) / (factorial(n - k) * factorial(k)) * p**k * (1 - p) ** (n - k)\n\n\n@reactive.calc\ndef calc_df():\n    p = input.p()\n    df = pd.DataFrame({\"successes\": range(n + 1)})\n    df[\"probability of successes\"] = df[\"successes\"].apply(lambda x: p_of_x(p, n, x))\n    return df\n\n\n@render_plotly\ndef binomial_plot():\n    data = calc_df()\n    fig = px.bar(\n        data,\n        x=\"successes\",\n        y=\"probability of successes\",\n        title=f\"Binomial Distribtuion of an Experiment with {n} Trials\",\n        width=600,\n        height=400,\n        labels={\n            \"successes\": \"No. of Successes, k\",\n            \"probability of successes\": \"Probability of Exactly k Successes\",\n        },\n        hover_data={'probability of successes': ':.3f'}\n    )\n\n    fig.update_yaxes(range=[0,1])\n\n    return fig\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Statistics Topics",
      "Binomial Distribution"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is still a work in progress.\n\n\n\n Back to top"
  },
  {
    "objectID": "clt_dashboard.html",
    "href": "clt_dashboard.html",
    "title": "Central Limit Theorem",
    "section": "",
    "text": "Here’s a Title\nAdd some text to discuss subject.\n\n\nNow show the visualization\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 600\n\nfrom shiny.express import input, render, ui\nfrom shiny import reactive\nfrom shinywidgets import render_plotly\n\nimport pandas as pd\n#from numpy.random import uniform, pareto\nfrom numpy import random\nimport plotly.figure_factory as ff\nimport scipy.stats # A depenency of ff\n\nui.page_opts(title=\"Visualizing the Central Limit Theorem\")\n\nwith ui.sidebar(bg=\"f8f8f8\"):\n    ui.input_select(\n        \"distribution\",\n        \"Select distribution\",\n        choices=[\"Uniform\", \"Pareto\"],\n        selected=\"Uniform\",\n    )\n    ui.input_select(\n        \"sample_size\", \n        \"Select sample size\", \n        choices=[\"2\", \"10\", \"100\"], \n        selected=\"2\"\n    )\n    ui.input_action_button(\"take_sample\", \"Take sample\")\n\n# Initialize sample_means, a list of sample means for plotting\nsample_means = reactive.value([])\n\nrng = random.default_rng()\n\n@reactive.calc\ndef get_population():\n    # Generate a population according to the selected distribution and cache it.\n    print(\"Running get_population\")\n    selected = input.distribution()\n    if selected == \"Uniform\":\n        population = random.uniform(low=0, high=1, size=1000)\n    elif selected == \"Pareto\":\n        population = random.pareto(a=3, size=1000)\n    return population\n\n@reactive.effect\n@reactive.event(input.distribution)\ndef reset_sample_means():\n    # Reset the sample_means() if a new distribution is selected.\n    print(\"Resetting sample means\")  # Debug log\n    sample_means.set([])  # Clear the sample means\n\n@reactive.effect\n@reactive.event(input.take_sample)\ndef update_sample_means():\n    # Take a random sample from the cached population and return its mean\n    population = get_population()\n    sample_size = int(input.sample_size())\n    sample = rng.choice(population, size=sample_size, replace=True)\n    sample_mean = sample.mean() \n    \n    # Add the sample mean of a new random sample from the cached population\n    x = sample_means().copy()\n    x.append(sample_mean)\n    sample_means.set(x) # Updates reactive value, does not take a set\n    print(\"Updated sample means: \", x)\n    \ndef txt_sample_means():\n    means = sample_means()\n    formatted_means = [f\"{mean:.3g}\" for mean in means]\n    return f\"Sample means: \\n{formatted_means}\"\n\nwith ui.card():\n    with ui.layout_columns(col_widths=[6,6]):\n        with ui.card():\n            # View the population\n    \n            @render_plotly\n            def dist_plot():\n                x = [get_population()]\n    \n                fig = ff.create_distplot(\n                    x,\n                    group_labels=[\"probability density\"],\n                    bin_size=0.05,\n                    colors=[\"#A6ACEC\"],\n                    show_rug=False,\n                )\n                fig.update_layout(\n                    title_text=f\"A {input.distribution()} Distributed Population\",\n                    yaxis_title_text=\"Probability Density\",\n                    xaxis_title_text=\"Value\",\n                    showlegend=False\n                )\n                return fig\n    \n        with ui.card():\n            \"Sampling Distribution Histogram\"\n    \n            @render_plotly\n            @reactive.event(input.take_sample)\n            def hist_plot():\n                # get the new sample_means since the take_sample button was pushed\n                x = sample_means()\n            \n                fig = ff.create_distplot(\n                    [x],\n                    group_labels=[\"sampling means\"],\n                    bin_size=0.03,\n                    colors=['#A6ACEC'],\n                    #curve_type='normal', # override the kde default\n                    show_rug=False,\n                )\n                fig.update_layout(\n                    yaxis_title_text=\"Count\",\n                    xaxis_title_text=\"Sample Mean\",\n                    showlegend=False,\n                    xaxis_range=[0,1]\n                )\n                return fig\n\n    with ui.card_footer():\n        @render.text\n        def sample_means_output():\n            return txt_sample_means()\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Statistics Topics",
      "Central Limit Theorem"
    ]
  }
]